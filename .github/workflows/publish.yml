name: Publish PipelineDP

on:
  release:
    types: [published]

jobs:
  deploy:
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup msbuild Windows
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Fix Paths Windows
        # Make sure that tar.exe from Git is used not from Windows
        if: runner.os == 'Windows'
        run: |
          @("C:\Program Files\Git\usr\bin") + (Get-Content $env:GITHUB_PATH) | Set-Content $env:GITHUB_PATH -Encoding utf8

      - name: Build Pipeline DP Windows
        if: runner.os == 'Windows'
        timeout-minutes: 20
        run: |
          $PYTHONHOME=$(python -c 'import sys; print(sys.executable);').replace('\', '/')
          $PYTHONPATH=$(python -c "import sys; print([x for x in sys.path if 'site-packages' in x][0]);").replace('\', '/')
          echo "PYTHONHOME=$PYTHONHOME"
          echo "PYTHONPATH=$PYTHONPATH"
          echo "Running: ${{ matrix.os }}"
      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Get poetry cache dir
        id: poetry-cache
        run: |
          echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: poetry cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry install

      - name: Build PipelineDP Linux
        run: |
          poetry run python setup.py bdist_wheel

      - name: Install Wheel Unix
        if: runner.os != 'Windows'
        run: |
          pip install `find -L ./ -name "*.whl"`

      - name: Import Package
        run: |
          python -c "import pipeline_dp; print(pipeline_dp.__version__)"


      - name: Check Wheel Unix
        if: runner.os != 'Windows'
        run: |
          poetry run twine check `find -L ./ -name "*.whl"`

      - name: Publishing the wheel
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TOKEN }}
        run: |
          poetry run twine upload --skip-existing dist/*.whl
